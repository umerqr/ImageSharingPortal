{"version":3,"sources":["components/ContentHomepage/index.js"],"names":["AppButton","lazy","AppPopper","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","display","overflow","borderRadius","ContentHomepage","props","useState","showAddArea","setShowAddArea","activeImage","setActiveImage","anchorEl","setAnchorEl","contentHomepageReducer","useSelector","state","auth","useContext","AuthContext","listData","userListData","dispatch","useDispatch","items","selected","draggableState","setDraggableState","useEffect","fetchListDataAction","fetchUserListDataAction","handleMouseEnter","event","itemName","handleTabButton","currentTarget","handleMouseLeave","e","url","id2List","droppable","droppable2","getList","id","className","label","user","name","onClick","onMouseLeave","onDragEnd","result","source","destination","droppableId","list","startIndex","endIndex","Array","from","splice","removed","reorder","index","droppableSource","droppableDestination","sourceClone","destClone","move","direction","provided","snapshot","ref","innerRef","style","length","map","item","draggableId","draggableProps","dragHandleProps","src","alt","onMouseEnter","placeholder","postListDataAction","disabled","subItem"],"mappings":"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","file":"static/js/4.f36b238b.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { lazy, useContext, useEffect, useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport './styles.css';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  fetchListDataAction,\r\n  fetchUserListDataAction,\r\n  postListDataAction,\r\n} from './actions';\r\nimport AppLabel from '../AppLabel';\r\nimport { AuthContext } from '../auth/authContext';\r\nconst AppButton = lazy(() => import(`../AppButton`));\r\nconst AppPopper = lazy(() => import(`../AppPopper`));\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  userSelect: 'none',\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : '',\r\n  ...draggableStyle,\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? 'lightblue' : '#eff6fc',\r\n  padding: grid,\r\n  display: `flex`,\r\n  overflow: `auto`,\r\n  borderRadius: `10px`,\r\n});\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nfunction ContentHomepage(props) {\r\n  const [showAddArea, setShowAddArea] = useState(false);\r\n  const [activeImage, setActiveImage] = useState(``);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const contentHomepageReducer = useSelector(\r\n    (state) => state.contentHomepageReducer\r\n  );\r\n\r\n  const auth = useContext(AuthContext);\r\n  const { listData, userListData } = contentHomepageReducer;\r\n  const dispatch = useDispatch();\r\n  const [draggableState, setDraggableState] = useState({\r\n    items: [],\r\n    selected: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchListDataAction());\r\n    dispatch(fetchUserListDataAction());\r\n  }, []);\r\n  useEffect(() => {\r\n    if (userListData) {\r\n      setDraggableState({ ...draggableState, selected: userListData });\r\n    }\r\n  }, [userListData]);\r\n  useEffect(() => {\r\n    if (listData) {\r\n      setDraggableState({ ...draggableState, items: listData });\r\n    }\r\n  }, [listData]);\r\n  const handleMouseEnter = (event, itemName) => {\r\n    handleTabButton(event, itemName);\r\n    const { currentTarget } = event;\r\n    setAnchorEl(currentTarget);\r\n  };\r\n  const handleMouseLeave = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleTabButton = (e, url) => {\r\n    setActiveImage(url);\r\n    handleClick(e);\r\n  };\r\n  const id2List = {\r\n    droppable: 'items',\r\n    droppable2: 'selected',\r\n  };\r\n  const getList = (id) => draggableState[id2List[id]];\r\n  const onDragEndHandler = (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        getList(source.droppableId),\r\n        source.index,\r\n        destination.index\r\n      );\r\n\r\n      let state = { ...draggableState, items };\r\n\r\n      if (source.droppableId === 'droppable2') {\r\n        state = { ...draggableState, selected: items };\r\n      }\r\n      setDraggableState(state);\r\n    } else {\r\n      const result = move(\r\n        getList(source.droppableId),\r\n        getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n      setDraggableState({\r\n        ...draggableState,\r\n        items: result.droppable,\r\n        selected: result.droppable2,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className='d-flex justify-content-center'>\r\n        <AppLabel\r\n          className='welcome-label-styling'\r\n          label={`Welcome to the Image Portal ${auth.user.name}`}\r\n        />\r\n      </div>\r\n      <div className='d-flex justify-content-end'>\r\n        <div>\r\n          <AppButton\r\n            className='mt-5'\r\n            label='Add Media'\r\n            onClick={() => setShowAddArea(true)}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className='mt-5' onMouseLeave={() => handleMouseLeave()}>\r\n        <DragDropContext onDragEnd={onDragEndHandler}>\r\n          <Droppable droppableId='droppable2' direction={'horizontal'}>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n                className='mb-5'\r\n              >\r\n                {draggableState.selected.length === 0 && (\r\n                  <div className='no-image-styling'>\r\n                    <AppLabel label='Please Add Media here' />\r\n                  </div>\r\n                )}\r\n                {draggableState.selected.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                      >\r\n                        <img\r\n                          className='array-image-styling'\r\n                          key={item.id}\r\n                          src={item.url}\r\n                          alt='I'\r\n                          onMouseLeave={() => handleMouseLeave()}\r\n                          onMouseEnter={(e) => handleMouseEnter(e, item.url)}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                <div className='image-placeholder-styling'>\r\n                  {provided.placeholder}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n          {showAddArea && (\r\n            <>\r\n              <div className='d-flex justify-content-center'>\r\n                <AppLabel\r\n                  className='add-image-label-styling'\r\n                  label='Please Select images from the list below.'\r\n                />\r\n              </div>\r\n              <Droppable droppableId='droppable' direction={'horizontal'}>\r\n                {(provided, snapshot) => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    style={getListStyle(snapshot.isDraggingOver)}\r\n                  >\r\n                    {draggableState.items.length === 0 && (\r\n                      <div className='no-image-styling'>\r\n                        <AppLabel label='There are no more images to select from.' />\r\n                      </div>\r\n                    )}\r\n                    {draggableState.items.map((item, index) => (\r\n                      <Draggable\r\n                        key={item.id}\r\n                        draggableId={item.id}\r\n                        index={index}\r\n                      >\r\n                        {(provided, snapshot) => (\r\n                          <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            style={getItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                            )}\r\n                          >\r\n                            <img\r\n                              className='array-image-styling'\r\n                              key={item.id}\r\n                              src={item.url}\r\n                              alt='I'\r\n                              onMouseLeave={() => handleMouseLeave()}\r\n                              onMouseEnter={(e) =>\r\n                                handleMouseEnter(e, item.url)\r\n                              }\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </Draggable>\r\n                    ))}\r\n                    <div className='image-placeholder-styling'>\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </>\r\n          )}\r\n        </DragDropContext>\r\n        <AppButton\r\n          label='Update Images'\r\n          className='mt-2'\r\n          onClick={() => dispatch(postListDataAction(draggableState.selected))}\r\n          disabled={(() => {\r\n            if (userListData === draggableState.selected) return true;\r\n          })()}\r\n        />\r\n        <AppPopper\r\n          subItem={activeImage}\r\n          handleMouseLeave={handleMouseLeave}\r\n          anchorEl={anchorEl}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nContentHomepage.propTypes = {};\r\n\r\nexport default ContentHomepage;\r\n"],"sourceRoot":""}